<?php

/**
 * @file
 * Module hooks.
 */

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\webform\Entity\Webform;

/**
 * Update 3rd party settings so that they can be saved to data.
 *
 * Does not accept date objects.
 *
 * @param array $form
 *   Form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 */
function grants_metadata__validate_third_party_settings(array &$form, FormStateInterface $form_state) {

  // Get config for third party settings.
  $config = \Drupal::config('grants_metadata.settings');
  $thirdPartyOptions = $config->get('third_party_options');

  // Get values from form to get 3rd party settings.
  $formValues = $form_state->getValues();
  /** @var \Drupal\Core\Datetime\DrupalDateTime $applicationOpen */
  $applicationOpen = $formValues["third_party_settings"]["grants_metadata"]["applicationOpen"];
  if ($applicationOpen != NULL) {
    // Transform it to datetime value.
    $formValues["third_party_settings"]["grants_metadata"]["applicationOpen"] = $applicationOpen->format('Y-m-d\TH:i:s');
  }

  $applicationClose = $formValues["third_party_settings"]["grants_metadata"]["applicationClose"];
  if ($applicationClose != NULL) {
    $formValues["third_party_settings"]["grants_metadata"]["applicationClose"] = $applicationClose->format('Y-m-d\TH:i:s');
  }

  // Get selected application type from form.
  $applicationTypeSelect = $formValues["third_party_settings"]["grants_metadata"]["applicationTypeSelect"];
  // Get selected application type from config.
  $applicationTypeSelected = $thirdPartyOptions["application_types"][$applicationTypeSelect];
  // If we have one.
  if ($applicationTypeSelected) {
    // Set third application typ + id from configuration based on selected type.
    $formValues["third_party_settings"]["grants_metadata"]["applicationType"] = $applicationTypeSelected['id'];
    $formValues["third_party_settings"]["grants_metadata"]["applicationTypeID"] = $applicationTypeSelect;
  }

  // Set values back to form state.
  $form_state->setValues($formValues);
}

/**
 * Implements hook_webform_presave().
 */
function grants_metadata_webform_presave(Webform $entity) {

  // Get third aprty settings.
  $thirdPartySettings = $entity->getThirdPartySettings('grants_metadata');

  // Get nodes that have attached this webform.
  try {
    $entityQuery = \Drupal::entityQuery('node')
      // Access checks on content are required.
      ->accessCheck(FALSE)
      ->condition('type', 'service')
      ->condition('field_webform', $entity->id());
    $results = $entityQuery->execute();
  }
  catch (\Exception $e) {
    // Ignore errors during tests.
    return;
  }

  // Get entity status.
  $status = $entity->isOpen();
  // Load nodes.
  $servicePages = Node::loadMultiple($results);

  foreach ($servicePages as $page) {
    // Update node values from 3rd party settings.
    grants_metadata_set_node_values($page, $status, $thirdPartySettings);
    try {
      // Save node.
      $page->save();
      \Drupal::messenger()
        ->addStatus(t('Service page @nodetitle updated', ['@nodetitle' => $page->label()]));
    }
    catch (EntityStorageException $e) {
      \Drupal::messenger()
        ->addStatus(t('Service page @nodetitle update failed.', ['@nodetitle' => $page->label()]));
      \Drupal::messenger()
        ->addStatus(t('Service page @nodetitle updated', ['@nodetitle' => $page->label()]));
      \Drupal::logger('grants_metadata')
        ->error('Error saving 3rd party settings to service page. Error: @error', ['@error' => $e->getMessage()]);
    }
  }
}

/**
 * Add configurations from webform to given node.
 *
 * @param \Drupal\node\Entity\Node $page
 *   Node to be edited.
 * @param bool $status
 *   Status of the webform.
 * @param mixed $thirdPartySettings
 *   Webform third party settings.
 */
function grants_metadata_set_node_values(Node &$page, bool $status, mixed $thirdPartySettings): void {

  Drupal::messenger()
    ->addStatus(t('Updating service @nodetype from webform values', ['@nodetype' => $page->getTitle()]));

  // Set application open boolean from form open status.
  $page->set('field_application_open', $status);
  // Applicant types.
  if (!empty($thirdPartySettings["applicantTypes"])) {
    $applicantTypes = $thirdPartySettings["applicantTypes"];
    if (!is_array($applicantTypes)) {
      $applicantTypes = [$applicantTypes];
    }
    $page->set('field_hakijatyyppi', array_values($applicantTypes));
  }
  // Type terms.
  if (!empty($thirdPartySettings["applicationTypeTerms"])) {
    $tids = array_values($thirdPartySettings["applicationTypeTerms"]);
    $terms = Term::loadMultiple($tids);
    $page->set('field_avustuslaji', $terms);
  }
  $applicationOpenStr = strtotime($thirdPartySettings["applicationOpen"]);
  $applicationOpenDate = DrupalDateTime::createFromFormat('U', $applicationOpenStr, 'Europe/Helsinki');
  $applicationOpenDateFormat = $applicationOpenDate->format('Y-m-d\TH:i:s');

  $applicationCloseStr = strtotime($thirdPartySettings["applicationClose"]);
  $applicationCloseDate = DrupalDateTime::createFromFormat('U', $applicationCloseStr, 'Europe/Helsinki');
  $applicationCloseDateFormat = $applicationCloseDate->format('Y-m-d\TH:i:s');

  // If we have open time, assume that end time is added as well and
  // use them as is.
  if (!empty($thirdPartySettings["applicationOpen"])) {
    $page->set('field_application_period',
      [
        'value' => $applicationOpenDateFormat,
        'end_value' => $applicationCloseDateFormat,
      ]);
  }
  // Set the available acting years.
  $page->set('field_application_acting_years', $thirdPartySettings['applicationActingYears']);
  $page->set('field_acting_years_type', $thirdPartySettings['applicationActingYearsType'] ?? 'fixed');
  $page->set('field_acting_years_next_count', $thirdPartySettings['applicationActingYearsNextCount'] ?? NULL);

  // If application is set to be continuous, mark it to node as well.
  if ($thirdPartySettings["applicationContinuous"] == 1) {
    $page->set('field_application_continuous', '1');
  }
  else {
    // If not, set it false.
    $page->set('field_application_continuous', '0');
  }
  // Set target group.
  if (!empty($thirdPartySettings["applicationTargetGroup"])) {
    $term = Term::load($thirdPartySettings["applicationTargetGroup"]);
    $page->set('field_target_group', $term);
  }
  // Set target group.
  if (!empty($thirdPartySettings["applicationIndustry"])) {
    $page->set('field_industry', $thirdPartySettings["applicationIndustry"]);
  }
}

/**
 * Callback for getting options for industry field from configuration.
 *
 * @return array
 *   Options for industry dropdown.
 */
function grants_metadata_field_industry_options(): array {
  $config = \Drupal::config('grants_metadata.settings');
  $thirdPartyOptions = $config->get('third_party_options');
  return $thirdPartyOptions['application_industries'];
}

/**
 * Alter form.
 */
function grants_metadata_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if ($form_id == 'webform_settings_form' || $form_id == 'webform_add_form' || $form_id == 'webform_duplicate_form') {

    $bundle = $form_state->getFormObject()->getEntity();

    $config = \Drupal::config('grants_metadata.settings');
    $thirdPartyOptions = $config->get('third_party_options');
    $form['#attached']['drupalSettings'] = $thirdPartyOptions;

    $form["#validate"][] = 'grants_metadata__validate_third_party_settings';

    // Because hidden by default.
    $form["third_party_settings"]["#access"] = TRUE;
    $form['third_party_settings']['#tree'] = TRUE;

    $form['third_party_settings']['grants_metadata'] = [
      '#type' => 'details',
      '#title' => t('Application details'),
      '#open' => TRUE,
      '#input' => FALSE,
    ];

    $applicationTypeOptions = [];
    foreach ($thirdPartyOptions['application_types'] as $typeId => $type) {
      $applicationTypeOptions[$typeId] = $type['labels']['fi'];
    }

    $form['third_party_settings']['grants_metadata']['applicationTypeSelect'] = [
      '#type' => 'select',
      '#title' => t('Application Type'),
      '#default_value' => $bundle->getThirdPartySetting('grants_metadata', 'applicationTypeID'),
      '#options' => $applicationTypeOptions,
      '#required' => TRUE,
    ];

    $form['third_party_settings']['grants_metadata']['applicationType'] = [
      '#type' => 'textfield',
      '#title' => t('Application Type'),
      '#default_value' => $bundle->getThirdPartySetting('grants_metadata', 'applicationType'),
      '#disabled' => TRUE,
    ];

    $form['third_party_settings']['grants_metadata']['applicationTypeID'] = [
      '#type' => 'textfield',
      '#title' => t('Application Type ID'),
      '#default_value' => $bundle->getThirdPartySetting('grants_metadata', 'applicationTypeID'),
      '#disabled' => TRUE,
    ];

    $form['third_party_settings']['grants_metadata']['applicationIndustry'] = [
      '#type' => 'select',
      '#title' => t('Grants industry'),
      '#default_value' => $bundle->getThirdPartySetting('grants_metadata', 'applicationIndustry'),
      '#options' => $thirdPartyOptions['application_industries'],
      '#required' => TRUE,
    ];

    $form['third_party_settings']['grants_metadata']['applicantTypes'] = [
      '#type' => 'select',
      '#title' => t('Applicant types'),
      '#default_value' => $bundle->getThirdPartySetting('grants_metadata', 'applicantTypes'),
      '#options' => $thirdPartyOptions['applicant_types'],
      '#required' => TRUE,
      '#multiple' => TRUE,
    ];

    $language = \Drupal::languageManager()->getCurrentLanguage()->getId();

    // Load the taxonomy terms.
    $terms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties([
        'vid' => 'avustuslaji',
      ]);

    // Build options list.
    $termOptions = [];
    foreach ($terms as $term) {
      if ($term->hasTranslation($language)) {
        $translated_term = \Drupal::service('entity.repository')->getTranslationFromContext($term, $language);
        $termOptions[$term->id()] = $translated_term->label();
      }
      else {
        $termOptions[$term->id()] = $term->label();
      }
    }

    $form['third_party_settings']['grants_metadata']['applicationTypeTerms'] = [
      '#type' => 'select',
      '#title' => t('Avustuslaji'),
      '#default_value' => $bundle->getThirdPartySetting('grants_metadata', 'applicationTypeTerms'),
      '#options' => $termOptions,
      '#multiple' => TRUE,
      '#required' => TRUE,
    ];

    // Load the taxonomy terms.
    $terms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties([
        'vid' => 'target_group',
      ]);

    // Build options list.
    $termOptions = [];
    foreach ($terms as $term) {
      if ($term->hasTranslation($language)) {
        $translated_term = \Drupal::service('entity.repository')->getTranslationFromContext($term, $language);
        $termOptions[$term->id()] = $translated_term->label();
      }
      else {
        $termOptions[$term->id()] = $term->label();
      }
    }

    $form['third_party_settings']['grants_metadata']['applicationTargetGroup'] = [
      '#type' => 'select',
      '#title' => t('Application target group'),
      '#default_value' => $bundle->getThirdPartySetting('grants_metadata', 'applicationTargetGroup'),
      '#options' => $termOptions,
      '#required' => TRUE,
    ];

    $openValue = $bundle->getThirdPartySetting('grants_metadata', 'applicationOpen');
    if ($openValue != NULL) {
      $applicationOpenDate = DrupalDateTime::createFromFormat('Y-m-d\TH:i:s', $openValue, 'Europe/Helsinki');
    }
    else {
      $applicationOpenDate = '';
    }

    $form['third_party_settings']['grants_metadata']['applicationOpen'] = [
      '#type' => 'datetime',
      '#title' => t('Application opens'),
      '#default_value' => $applicationOpenDate,
    ];

    $closeValue = $bundle->getThirdPartySetting('grants_metadata', 'applicationClose');
    if ($closeValue != NULL) {
      $applicationCloseDate = DrupalDateTime::createFromFormat('Y-m-d\TH:i:s', $closeValue, 'Europe/Helsinki');
    }
    else {
      $applicationCloseDate = '';
    }

    $form['third_party_settings']['grants_metadata']['applicationClose'] = [
      '#type' => 'datetime',
      '#title' => t('Application closes'),
      '#default_value' => $applicationCloseDate,
    ];

    $current_year = (int) date("Y");
    for ($i = 0; $i <= 10; $i++) {
      $actingYearOptions[$current_year + $i] = $current_year + $i;
    }

    $actingYearValues = $bundle->getThirdPartySetting('grants_metadata', 'applicationActingYears');
    if ($actingYearValues != NULL) {
      $applicationActingYears = $actingYearValues;
    }
    else {
      // Default value (this year + 2 years)
      $applicationActingYears = [];
      for ($i = 0; $i <= 2; $i++) {
        $applicationActingYears[] = $current_year + $i;
      }
    }

    $yearsType = $bundle->getThirdPartySetting('grants_metadata', 'applicationActingYearsType') ?? 'fixed';
    $form['third_party_settings']['grants_metadata']['applicationActingYearsType'] = [
      '#type' => 'radios',
      '#title' => 'Acting year type',
      '#required' => TRUE,
      '#options' => [
        'fixed' => t('Fixed years'),
        'current_and_next_x_years' => t('Current year and next X years'),
        'next_x_years' => t('Next X years'),
      ],
      '#default_value' => $yearsType,
    ];

    $form['third_party_settings']['grants_metadata']['applicationActingYears'] = [
      '#type' => 'select',
      '#title' => t('Available acting years'),
      '#default_value' => $applicationActingYears,
      '#options' => $actingYearOptions,
      '#multiple' => TRUE,
      '#states' => [
        'visible' => [
          'input[name="third_party_settings[grants_metadata][applicationActingYearsType]"]' => ['value' => 'fixed'],
        ],
        'required' => [
          'input[name="third_party_settings[grants_metadata][applicationActingYearsType]"]' => ['value' => 'fixed'],
        ],
      ],
    ];

    $yearsCount = $bundle->getThirdPartySetting('grants_metadata', 'applicationActingYearsNextCount') ?? 1;
    $form['third_party_settings']['grants_metadata']['applicationActingYearsNextCount'] = [
      '#type' => 'number',
      '#step' => 1,
      '#title' => 'Number of upcoming years to show',
      '#min' => 0,
      '#states' => [
        'visible' => [
          'input[name="third_party_settings[grants_metadata][applicationActingYearsType]"]' => ['!value' => 'fixed'],
        ],
        'required' => [
          'input[name="third_party_settings[grants_metadata][applicationActingYearsType]"]' => ['!value' => 'fixed'],
        ],
      ],
      '#default_value' => $yearsCount,
    ];

    $form['third_party_settings']['grants_metadata']['applicationContinuous'] = [
      '#type' => 'checkbox',
      '#title' => t('Is application continuous'),
      '#default_value' => $bundle->getThirdPartySetting('grants_metadata', 'applicationContinuous'),
    ];

    $form['third_party_settings']['grants_metadata']['disableCopying'] = [
      '#type' => 'checkbox',
      '#title' => t('Disable copying for this application'),
      '#default_value' => $bundle->getThirdPartySetting('grants_metadata', 'disableCopying'),
    ];
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for node_service_edit_form.
 *
 * Disable certain fields if a webform is selected.
 */
function grants_metadata_form_node_service_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $stateCondition = ['select[name="field_webform[0][target_id]"]' => ['filled' => FALSE]];
  $hiddenFields = [
    'field_avustuslaji',
    'field_industry',
    'field_avustuslaji',
    'field_target_group',
    'field_hakijatyyppi',
    'field_application_period',
    'field_application_open',
    'field_application_continuous',
    'field_application_acting_years',
    'field_acting_years_type',
    'field_acting_years_next_count',
  ];
  foreach ($hiddenFields as $fieldName) {
    $form[$fieldName]['#states'] = [
      'enabled' => $stateCondition,
    ];
  }
  // Hide webform specific settings.
  $form['field_webform']['widget'][0]['settings']['#access'] = FALSE;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function grants_metadata_preprocess_block(&$variables) {

  // Also invalidate breadcrumb cache.
  if ($variables["plugin_id"] == 'system_breadcrumb_block') {
    $variables["elements"]["#cache"]["contexts"][] = 'user';
    $variables["content"]["#cache"]["contexts"][] = 'user';

    $variables["content"]["#cache"]["max-age"] = 0;
    $variables["elements"]["#cache"]["max-age"] = 0;
  }
}
