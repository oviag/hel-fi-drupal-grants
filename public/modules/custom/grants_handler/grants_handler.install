<?php

/**
 * @file
 * Database schema.
 */

/**
 * Implements hook_schema().
 */
function grants_handler_schema(): array {
  $schema = [];

  $schema['grants_handler_saveids'] = [
    'description' => 'Table that contains saveids for submitted applications, for data integrity checks.',
    'fields' => [
      'lid' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique log event ID.',
      ],
      'webform_id' => [
        'description' => 'The webform id.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ],
      'sid' => [
        'description' => 'The webform submission id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'application_number' => [
        'description' => 'Application number.',
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
      ],
      'handler_id' => [
        'description' => 'The webform handler id.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
      ],
      'uid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {users}.uid of the user who triggered the event.',
      ],
      'user_uuid' => [
        'description' => 'User helsinkiprofiili id',
        'type' => 'varchar',
        'length' => 40,
        'not null' => TRUE,
        'default' => '',
      ],
      'saveid' => [
        'description' => 'Saveid used',
        'type' => 'varchar',
        'length' => 40,
        'not null' => TRUE,
        'default' => '',
      ],
      'timestamp' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Unix timestamp of when event occurred.',
      ],
    ],
    'primary key' => ['lid'],
    'indexes' => [
      'webform_sid_saveid' => ['webform_id', 'sid', 'saveid'],
      'webform_appno_saveid' => ['webform_id', 'application_number', 'saveid'],
    ],
  ];

  $schema['grants_handler_log'] = [
    'description' => 'Table that contains logs of all webform navigation events.',
    'fields' => [
      'lid' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique log event ID.',
      ],
      'webform_id' => [
        'description' => 'The webform id.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ],
      'sid' => [
        'description' => 'The webform submission id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      's_uuid' => [
        'description' => 'Submission UUID',
        'type' => 'varchar',
        'length' => 40,
        'not null' => TRUE,
        'default' => '',
      ],
      'handler_id' => [
        'description' => 'The webform handler id.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
      ],
      'application_number' => [
        'description' => 'Application number.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
      ],
      'page' => [
        'description' => 'Webform page name',
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
      ],
      'uid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {users}.uid of the user who triggered the event.',
      ],
      'user_uuid' => [
        'description' => 'User helsinkiprofiili id',
        'type' => 'varchar',
        'length' => 40,
        'not null' => TRUE,
        'default' => '',
      ],
      'operation' => [
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'description' => 'Type of operation, for example "save", "sent", or "update."',
      ],
      'data' => [
        'type' => 'blob',
        'not null' => TRUE,
        'size' => 'big',
        'description' => 'Serialized array of data.',
      ],
      'timestamp' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Unix timestamp of when event occurred.',
      ],
    ],
    'primary key' => ['lid'],
    'indexes' => [
      'webform_sid_operation' => ['webform_id', 'sid', 'operation'],
    ],
  ];

  $schema['grants_handler_locks'] = [
    'description' => 'Table that contains locks for forms.',
    'fields' => [
      'lid' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique log event ID.',
      ],
      'application_number' => [
        'description' => 'Application number.',
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
      ],
      'user_uuid' => [
        'description' => 'Lock owner helsinkiprofiili id',
        'type' => 'varchar',
        'length' => 40,
        'not null' => TRUE,
        'default' => '',
      ],
      'form_type' => [
        'type' => 'int',
        'not null' => TRUE,
      ],
      'expire' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Unix timestamp of when lock automatically expires occurred.',
      ],
    ],
    'primary key' => ['lid'],
    'indexes' => [
      'webform_locks_application_number' => ['application_number'],
    ],
  ];

  return $schema;
}

/**
 * Update the length of a text field which already contains data.
 *
 * @param string $entity_type_id
 *   Entity type id.
 * @param string $field_name
 *   Name of field.
 * @param int $new_length
 *   New length for field.
 */
function _module_change_text_field_max_length($entity_type_id, $field_name, $new_length) {
  $name = 'field.storage.' . $entity_type_id . "." . $field_name;

  // Get the current settings.
  $result = \Drupal::database()->query(
    'SELECT data FROM {config} WHERE name = :name',
    [':name' => $name]
  )->fetchField();
  $data = unserialize($result);
  $data['settings']['max_length'] = $new_length;

  // Write settings back to the database.
  \Drupal::database()->update('config')
    ->fields(['data' => serialize($data)])
    ->condition('name', $name)
    ->execute();

  // Update the value column in both the _data and _revision
  // tables for the field.
  $table = $entity_type_id . "__" . $field_name;
  $table_revision = $entity_type_id . "_revision__" . $field_name;
  $new_field = ['type' => 'varchar', 'length' => $new_length];
  $col_name = $field_name . '_value';
  \Drupal::database()->schema()->changeField($table, $col_name, $col_name, $new_field);
  \Drupal::database()->schema()->changeField($table_revision, $col_name, $col_name, $new_field);

  // Flush the caches.
  drupal_flush_all_caches();
}

/**
 * Create DB table for grants handler.
 */
function grants_handler_update_9000(&$sandbox) {
  $schema = grants_handler_schema();
  \Drupal::database()
    ->schema()
    ->createTable('grants_handler_log', $schema['grants_handler_log']);
}

/**
 * Create DB table for grants handler.
 */
function grants_handler_update_9001(&$sandbox) {
  $schema = grants_handler_schema();
  \Drupal::database()
    ->schema()
    ->createTable('grants_handler_saveids', $schema['grants_handler_saveids']);
}

use Drupal\Core\Database\Database;
use Drupal\node\Entity\Node;
use Drupal\webform\Entity\Webform;

/**
 * Add submission UUID column for handler log.
 */
function grants_handler_update_9002(&$sandbox) {
  $spec = [
    'description' => 'Submission UUID',
    'type' => 'varchar',
    'length' => 40,
    'not null' => TRUE,
    'default' => '',
  ];
  $schema = Database::getConnection()->schema();
  $schema->addField('grants_handler_log', 's_uuid', $spec);
}

/**
 * Add application number column for handler log.
 */
function grants_handler_update_9003(&$sandbox) {
  $spec = [
    'description' => 'Application number.',
    'type' => 'varchar',
    'length' => 64,
    'not null' => FALSE,
  ];
  $schema = Database::getConnection()->schema();
  $schema->addField('grants_handler_log', 'application_number', $spec);
}

/**
 * Add application number column for handler log.
 */
function grants_handler_update_9004(&$sandbox) {
  $spec = [
    'description' => 'Webform page name',
    'type' => 'varchar',
    'length' => 64,
    'not null' => FALSE,
  ];
  $schema = Database::getConnection()->schema();
  $schema->addField('grants_handler_log', 'page', $spec);
}

/**
 * Remove icareus config.
 */
function grants_handler_update_9005(&$sandbox) {

  $database = \Drupal::database();
  $database->query("delete from config where name = 'oembed_providers.provider.icareus_suite'");

}

/**
 * Update KASKO application form & service page.
 */
function grants_handler_update_9006(&$sandbox) {

  // Load webform.
  $kaskoform = Webform::load('kasvatus_ja_koulutus_yleisavustu');
  if ($kaskoform) {
    // Load node.
    $kaskoservice = Node::load(50);
    // Set reference.
    $kaskoservice->set('field_webform', $kaskoform);
    // Save service page.
    $kaskoservice->save();
    // Presave will handle everything else.
  }

}

/**
 * Remove configs of deleted modules.
 */
function grants_handler_update_9007(&$sandbox) {

  $deletedModules = [
    'helfi_proxy',
    'jst_clock',
    'jst_timer',
    'jsstimer',
  ];

  foreach ($deletedModules as $module) {
    \Drupal::keyValue("system.schema")->delete($module);
  }
}

/**
 * Create DB table for grants handler.
 */
function grants_handler_update_9008(&$sandbox) {
  $schema = grants_handler_schema();
  \Drupal::database()
    ->schema()
    ->createTable('grants_handler_locks', $schema['grants_handler_locks']);
}
